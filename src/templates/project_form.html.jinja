{% extends "base.html.jinja" %}

{% block title %}Project form{% endblock %}

{% block head %}
    {{ super() }}
    
    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/third-party.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/main.css">
{% endblock %}

{% block content %}
    <v-banner color="primary" class="elevation-5 px-10">
        <span 
            v-html="title"
            class="white--text 
            text-h4 
            px-10"></span>
        <template v-slot:actions v-if="!isError">
            <v-tooltip left v-if="!isNew && isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="error"
                        fab
                        small
                        @click="deleteDialog = true"
                        v-bind="attrs"
                        v-on="on">
                        <v-icon>mdi-delete</v-icon>
                    </v-btn>
                </template>
                <span>Delete</span>
            </v-tooltip>
            <v-tooltip left v-if="isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="success"
                        fab
                        small
                        @click="saveTemplate()"
                        v-bind="attrs"
                        v-on="on"
                        :disabled="!valid">
                        <v-icon>mdi-content-save</v-icon>
                    </v-btn>
                </template>
                <span>Save</span>
            </v-tooltip>
            <v-tooltip left v-if="isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="secondary"
                        fab
                        @click="initialize()"
                        v-bind="attrs"
                        v-on="on">
                        <v-icon>mdi-cancel</v-icon>
                    </v-btn>
                </template>
                <span>Cancel</span>
            </v-tooltip>
            <v-tooltip left v-if="!isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="secondary"
                        fab
                        @click="isEditable = true"
                        v-bind="attrs"
                        v-on="on">
                        <v-icon>mdi-pencil</v-icon>
                    </v-btn>
                </template>
                <span>Edit template</span>
            </v-tooltip>
        </template>
    </v-banner>


    <v-container>
        <v-tabs
            v-model="tab"
            show-arrows
            centered>
            <v-tab>Project details</v-tab>
            <v-tab>Contributors</v-tab>
            <v-tab>Datasets</v-tab>
            <v-tab>Samples</v-tab>
            <v-tab>Images</v-tab>
            <v-tab>Debug</v-tab>
        </v-tabs>
        
        <v-card 
            v-if="tab === 0"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <v-form ref="form" v-model="valid">
                <v-jsf v-model="data" :schema="schema" :options="options" />
            </v-form>
        </v-card>

        <v-card 
            v-if="tab === 1"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <pre>{{ '{{data.contributors}}' }}</pre>
        </v-card>

        <v-card 
            v-if="tab === 2"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <pre>DATASETS</pre>
        </v-card>

        <v-card 
            v-if="tab === 3"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <pre>SAMPLES</pre>
        </v-card>

        <v-card 
            v-if="tab === 4"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <pre>IMAGES</pre>
        </v-card>

        <v-card 
            v-if="tab === 5"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <h5>Id</h5> {{ '{{id}}' }}<br/><br/>
            <h5>Valid</h5> {{ '{{valid}}' }}<br/><br/>
            <h5>Data</h5>
            <pre>{{ '{{data}}' }}</pre><br/>
            <h5>Schema</h5>
            <pre>{{ '{{schema}}' }}</pre><br/>
        </v-card>
    </v-container>
{% endblock %}

{% block script %}
    <script type="text/javascript">
        
        const initialId = "{{ id }}"
        const options =  { 
            "editMode": "inline",
            "disableAll": false,
            //"rootDisplay": "expansion-panels"
        }

        Vue.component('VJsf', VJsf.default)

        new Vue({
            el: '#app',

            vuetify: new Vuetify({
                theme: {
                    themes: {
                        light: {
                            primary: '#af8d55'
                        },
                    },
                },
            }),

            data: {
                appBarDropdown: false,

                title: "Project form (loading)",
                isError: false,
                isEditable: false,
                isNew: false,
                isDeleted: false,

                tab: null,

                options,
                data: {},
                schema: {},
                valid: null,

                id: null,
                category: null,
                template: null,
            },

            mounted() {
                this.getData()
            },

            methods: {
                getSchema() {
                    let url = '/schema/project/' + this.category + (this.template ? '/' + this.template : '')
                    axios.get(url)
                        .then(response => {
                            // remove unnecessary bits from schema (and instance)
                            ['id', 'created_timestamp', 'created_by_user', 'modified_timestamp', 'modified_by_user'].forEach(e => delete response.data.properties[e])
                            // hide contributors
                            response.data.properties.contributors['x-display'] = 'hidden'
                            this.schema = response.data
                        })
                        .catch(error => {
                            console.log(error)
                        })
                },

                getData() {
                    axios.get('/api/v1/projects/' + initialId)
                        .then(response => {
                            this.data = response.data
                            this.id = response.data.id
                            this.title = "Project: <i>" + this.data.project_code + " <small>&commat;" + this.data.unit + "</small></i>"
                            this.isEditable = false
                            this.getKeys(this.data.$schema)
                            this.getSchema()
                        })
                        .catch(error => {
                            console.log(error)
                        })
                },

                getKeys(schemaUrl) {
                    let parts = schemaUrl.split("project/", 2)[1].split("/")
                    this.category = parts[0]
                    this.template = (parts.length >= 2) ? parts[1] : null
                },

                changeProject() {
                    this.templateAlias = ""
                    this.getSchema()
                    this.getTemplateList()
                }
            }
        })
    </script>
{% endblock %}