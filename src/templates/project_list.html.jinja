{% extends "base.html.jinja" %}

{% block title %}Projects{% endblock %}

{% block head %}
    {{ super() }}
{% endblock %}

{% block content %}

    <v-banner color="primary" class="elevation-5 px-10">
        <span class="white--text text-h4 px-10">Projects</span>
    </v-banner>

    <v-container>
        <v-row 
            v-if="alert" 
            class="pb-0">
            <v-col
                md="6"
                offset-md="3"
                class="pb-0">
                <v-alert class="mb-0"
                    v-model="alert"
                    :type="alertType"
                    elevation="5"
                    transition="scale-transition"
                    dismissible>
                    {{ '{{alertText}}' }}
                </v-alert>
            </v-col>
        </v-row>

        <v-card class="mt-6">
            <v-card-title>
                <v-text-field
                    v-model="search"
                    append-icon="mdi-magnify"
                    label="Search"
                    single-line
                    hide-details />
            </v-card-title>

            <v-data-table
                :headers="tableConfiguration.headers"
                :items="data"
                :server-items-length="total"
                :options.sync="tableConfiguration.options"
                :loading="loading"
                :footer-props="{'items-per-page-options':[10, 50, 100, -1]}"
                single-expand
                :expanded.sync="expanded"
                show-expand>

                <template v-slot:item.id="{ item }">
                    <v-tooltip top>
                        <template v-slot:activator="{ on, attrs }">
                            <v-icon
                                small
                                class="mr-2"
                                color="primary"
                                @click="openForm(item)"
                                v-bind="attrs"
                                v-on="on">
                                mdi-folder-open
                            </v-icon>
                        </template>
                        <span>Open project</span>
                    </v-tooltip>
                </template>
                <template v-slot:item.$schema="{ item }">
                    {{ '{{ getKeys(item.$schema).category }}' }}
                </template>
                <template v-slot:expanded-item="{ headers, item }">
                    <td :colspan="headers.length">
                        <v-simple-table dense class="my-3">
                            <template v-slot:default>
                                <tbody>
                                    <tr
                                        v-for="(val, key) in item"
                                        :key="key">
                                        <td class="font-weight-bold">{{ '{{ makeColumnName(key) }}' }}</td>
                                        <td>{{ '{{ val }}' }}</td>
                                        <td class="text-right">
                                            <v-tooltip top>
                                                <template v-slot:activator="{ on, attrs }">
                                                    <v-icon
                                                        small
                                                        color="primary"
                                                        @click="addColumn(key)"
                                                        v-bind="attrs"
                                                        v-on="on">
                                                        mdi-table-column-plus-after
                                                    </v-icon>
                                                </template>
                                                <span>Add column</span>
                                            </v-tooltip>
                                        </td>
                                    </tr>
                                </tbody>
                            </template>
                        </v-simple-table>
                    </td>
                </template>
            </v-data-table>

            <v-card-text style="height: 45px; position: relative">
                <v-fab-transition>
                    <v-tooltip left>
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                absolute
                                right
                                fab
                                @click="openForm()"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-plus</v-icon>
                            </v-btn>
                        </template>
                        <span>Create new project</span>
                    </v-tooltip>
                </v-fab-transition>
            </v-card-text>
        </v-card>
    </v-container>
{% endblock %}

{% block script %}
    <script type="text/javascript">
        
        new Vue({
            el: '#app',

            vuetify: new Vuetify({
                theme: {
                    themes: {
                        light: {
                            primary: '#af8d55'
                        },
                    },
                },
            }),

            data: {
                appBarDropdown: false,

                tableConfiguration: {
                    headers: [
                        {text: ' ', value:'id', sortable: false},
                        {text: 'Project', value: 'project_code'},
                        {text: 'Unit', value: 'unit'},
                        {text: 'Project category', value: '$schema'},
                        {text: 'Subject', value: 'subject'},
                        {text: 'State', value: 'state'},
                        {text: 'Access', value: 'terms.access'},
                        {text: '', value: 'data-table-expand', sortable: false },
                    ],
                    options: {
                        sortBy: ['project_code', 'unit'],
                        multiSort: true
                    },
                },

                data: [],
                total: 0,
                search: '',
                loading: true,
                expanded: [],

                alert: false,
                alertType: "info",
                alertText: ""
            },

            created() {
                let temp = window.localStorage.getItem('projectList')
                if (temp !== null) {
                    console.log('GET localStorage')
                    this.tableConfiguration = JSON.parse(temp)
                }
            },

            computed: {
                options() {
                    return this.tableConfiguration.options
                }
            },

            watch: {
                options() {
                    this.getData()
                },
            },

            methods: {
                flattenObj(obj) {
                    let result = {}
                    for (const i in obj) {
                        // We check the type of the i using typeof() function and recursively call the function again
                        if ((typeof obj[i]) === 'object' && !Array.isArray(obj[i])) {
                            const temp = this.flattenObj(obj[i])
                            for (const j in temp) {
                                // Store temp in result
                                if (Array.isArray(temp[j])) {
                                    temp[j] = JSON.stringify(temp[j])
                                    temp[j] = temp[j].replace(/{}"/g, '').replace('[', '').replace(']', '')
                                }
                                result[i + '.' + j] = temp[j]
                            }
                        } else { // Else store obj[i] in result directly
                                if (Array.isArray(obj[i])) {
                                    obj[i] = JSON.stringify(obj[i])
                                    obj[i] = obj[i].replace(/{}"/g, '').replace('[', '').replace(']', '')
                                }
                            result[i] = obj[i]
                        }
                    }
                    return result
                },

                makeColumnName(item) {
                    // split combined
                    if (item.includes('.')) {
                        let arr = item.split('.')
                        item = arr.pop()
                    }
                    // replace characters
                    item = item.replace('$', '').replace('_', ' ')
                    // capitalize first character
                    return item.charAt(0).toUpperCase() + item.slice(1);
                },

                addColumn(item) {
                    let position = this.tableConfiguration.headers.length - 1
                    this.tableConfiguration.headers.splice(position, 0, {
                        text: this.makeColumnName(item), 
                        value: item
                    })
                    window.localStorage.setItem('projectList', JSON.stringify(this.tableConfiguration))
                },

                getData() {
                    this.loading = true
                    
                    // query parameters
                    parameters = {
                        skip: (this.tableConfiguration.options.page - 1) * this.tableConfiguration.options.itemsPerPage,
                        limit: this.tableConfiguration.options.itemsPerPage,
                        sort_by: this.tableConfiguration.options.sortBy,
                        sort_desc: this.tableConfiguration.options.sortDesc
                    }
                 
                    // api call
                    url = '/api/v1/projects'
                    console.log('GET ' + url)
                    return axios.get(url, {params: parameters})
                        .then(response => {
                            this.data = []
                            for (i in response.data.data) {
                                this.data[i] = this.flattenObj(response.data.data[i])
                            }
                            this.total = response.data.query_parameters.total
                            this.loading = false
                            window.localStorage.setItem('projectList', JSON.stringify(this.tableConfiguration))
                        })
                        .catch(error => {
                            this.showAlert("error", "Connection failed.")
                            console.log(error)
                            this.loading = false
                        })
                },

                getKeys(schemaUrl) {
                    let parts = schemaUrl.split("project/", 2)[1].split("/")
                    let category = parts[0]
                    let template = (parts.length >= 2) ? parts[1] : null
                    return {category, template} 
                },

                openForm(item = null) {
                    url = "/projects/" + (item ? item.id : "new")
                    window.open(url, "_self")
                },

                showAlert(type, text) {
                    this.alert = true
                    this.alertType = type
                    this.alertText = text
                }
            }
        })
    </script>
{% endblock %}