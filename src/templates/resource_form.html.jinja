{% extends "base.html.jinja" %}

{% block title %}{{ title }}{% endblock %}

{% block head %}
    {{ super() }}
    
    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.11.3/dist/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.11.3/dist/third-party.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.11.3/dist/main.css">
{% endblock %}

{% block content %}
    <v-banner color="primary" class="elevation-5 px-10">
        <span 
            v-html="title"
            class="white--text 
            text-h4 
            px-10"></span>
        <template v-slot:actions v-if="!isError">
            <v-tooltip left v-if="!isNew && isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="error"
                        fab
                        small
                        @click="deleteDialog = true"
                        v-bind="attrs"
                        v-on="on">
                        <v-icon>mdi-delete</v-icon>
                    </v-btn>
                </template>
                <span>Delete</span>
            </v-tooltip>
            <v-tooltip left v-if="isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="success"
                        fab
                        small
                        @click="saveData()"
                        v-bind="attrs"
                        v-on="on"
                        :disabled="!isValid">
                        <v-icon>mdi-content-save</v-icon>
                    </v-btn>
                </template>
                <span>Save</span>
            </v-tooltip>
            <v-tooltip left v-if="isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="secondary"
                        fab
                        @click="getData()"
                        v-bind="attrs"
                        v-on="on">
                        <v-icon>mdi-cancel</v-icon>
                    </v-btn>
                </template>
                <span>Cancel</span>
            </v-tooltip>
            <v-tooltip left v-if="!isEditable">
                <template v-slot:activator="{ on, attrs }">
                    <v-btn
                        class="mx-2"
                        color="secondary"
                        fab
                        @click="isEditable = true"
                        v-bind="attrs"
                        v-on="on">
                        <v-icon>mdi-pencil</v-icon>
                    </v-btn>
                </template>
                <span>Edit template</span>
            </v-tooltip>
        </template>
    </v-banner>

    <v-container>
        <v-row v-if="alert">
            <v-col
                md="6"
                offset-md="3"
                class="pb-6">
                <v-alert class="mb-0"
                    v-model="alert"
                    :type="alertType"
                    elevation="5"
                    transition="scale-transition"
                    dismissible
                    v-text="alertText">
                </v-alert>
            </v-col>
        </v-row>

        <v-tabs
            v-if="!isError"
            v-model="tab"
            show-arrows
            centered>
            <v-tab 
                v-for="item in tabItems" 
                :key="item"
                v-text="item">
            </v-tab>
        </v-tabs>

        <v-card 
            v-if="tab === 0 && !isError"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <v-row>
                <v-spacer></v-spacer>
                <v-btn
                    v-if="isEditable"
                    @click="templateDialog = true"
                    color="primary"
                    dark>
                    <span v-text="resource"></span>&nbsp;category...
                </v-btn>
            </v-row>
            <v-row>
                <v-form ref="form" v-model="isValid">
                    <v-jsf 
                        v-model="data" 
                        :schema="schema" 
                        :options="formOptions"></v-jsf>
                </v-form>
            </v-row>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Project' && hasData && !isError"
            class="mt-6" 
            elevation="0">
            <v-card class="mt-6">
                <v-simple-table class="my-3">
                    <template v-slot:default>
                        <tbody>
                            <tr v-for="(val, key) in relatedProject"
                                :key="key">
                                <td><span class="font-weight-bold" v-text="makeColumnName(key)"></span></td>
                                <td><span v-text="val"></span></td>
                            </tr>
                        </tbody>
                    </template>
                </v-simple-table>

                <v-card-text v-if="Object.keys(data.project).length === 0" class="font-italic">
                    No linked project
                </v-card-text>

                <v-card-text style="height: 45px; position: relative; text-align: right">
                    <v-tooltip left>
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn v-if="Object.keys(data.project).length !== 0"
                                fab
                                small
                                class="mt-2 mr-4"
                                @click="getRelatedProject(data.project.project_id)"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-refresh</v-icon>
                            </v-btn>
                        </template>
                        <span>Refresh</span>
                    </v-tooltip>
                    <v-tooltip left v-if="isEditable && Object.keys(data.project).length > 0">
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="error"
                                fab
                                small
                                class="mt-2 mr-4"
                                @click="unlinkRelatedProject()"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-folder-remove</v-icon>
                            </v-btn>
                        </template>
                        <span>Unlink project</span>
                    </v-tooltip>
                    <v-tooltip left v-if="isEditable">
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                fab
                                class="mr-4"
                                @click="relatedProjectDialog = true"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-swap-horizontal-bold</v-icon>
                            </v-btn>
                        </template>
                        <span>Link project</span>
                    </v-tooltip>
                    <v-tooltip left v-if="Object.keys(data.project).length > 0">
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                fab
                                class="mr-4"
                                :href="'/projects/' + data.project.project_id"
                                target="_blank"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-folder-open</v-icon>
                            </v-btn>
                        </template>
                        <span>Open project</span>
                    </v-tooltip>
                </v-card-text>
            </v-card>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Projects' && hasData && !isError"
            class="mt-6" 
            elevation="0">
            <v-card class="mt-6">
                <v-list dense>
                    <v-subheader>Related projects</v-subheader>
                    <v-list-item-group
                        v-model="selectedRelatedProject"
                        color="primary">
                        <v-list-item
                            v-for="(project, i) in data.projects"
                            :key="i">
                            <v-list-item-icon>
                                <v-icon>mdi-folder-open</v-icon>
                            </v-list-item-icon>
                            <v-list-item-content>
                                <v-list-item-title v-text="project.project_code"></v-list-item-title>
                                <v-list-item-subtitle v-text="project.unit"></v-list-item-subtitle>
                            </v-list-item-content>
                        </v-list-item>
                    </v-list-item-group>
                </v-list>
                <v-card-text style="height: 45px; position: relative; text-align: right">
                    <v-tooltip left v-if="isEditable">
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                fab
                                class="mr-4"
                                @click="relatedProjectDialog = true"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-swap-horizontal-bold</v-icon>
                            </v-btn>
                        </template>
                        <span>Link project</span>
                    </v-tooltip>
                </v-card-text>
            </v-card>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Collection' && hasData && !isError"
            class="mt-6" 
            elevation="0">
            <v-card class="mt-6">
                <v-simple-table class="my-3">
                    <template v-slot:default>
                        <tbody>
                            <tr v-for="(val, key) in relatedCollection"
                                :key="key">
                                <td><span class="font-weight-bold" v-text="makeColumnName(key)"></span></td>
                                <td><span v-text="val"></span></td>
                            </tr>
                        </tbody>
                    </template>
                </v-simple-table>

                <v-card-text v-if="Object.keys(data.collection).length === 0" class="font-italic">
                    No linked collection
                </v-card-text>

                <v-card-text style="height: 45px; position: relative; text-align: right">
                    <v-tooltip left v-if="Object.keys(data.collection).length !== 0">
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                fab
                                small
                                class="mt-2 mr-4"
                                @click="getRelatedCollection(data.collection.collection_id)"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-refresh</v-icon>
                            </v-btn>
                        </template>
                        <span>Refresh</span>
                    </v-tooltip>
                    <v-tooltip left v-if="isEditable">
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                fab
                                class="mr-4"
                                @click="relatedCollectionDialog = true"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-swap-horizontal-bold</v-icon>
                            </v-btn>
                        </template>
                        <span>Link collection</span>
                    </v-tooltip>
                    <v-tooltip left v-if="Object.keys(data.collection).length > 0">
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                fab
                                class="mr-4"
                                :href="'/collections/' + data.collection.collection_id"
                                target="_blank"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-file-cabinet</v-icon>
                            </v-btn>
                        </template>
                        <span>Open collection</span>
                    </v-tooltip>
                </v-card-text>
            </v-card>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Datasets' && hasData && !isError"
            class="mt-6" 
            elevation="0">
            <v-card class="mt-6" v-if="relatedDatasets !== null">
                <v-data-table
                    :headers="relatedDatasetsHeaders"
                    :items="relatedDatasets"
                    :server-items-length="relatedDatasetsCount"
                    :options.sync="relatedDatasetsTableOptions"
                    :footer-props="{'items-per-page-options':[10, 50, 100, -1]}"
                    multi-sort>

                    <template v-slot:item.id="{ item }">
                        <v-tooltip top>
                            <template v-slot:activator="{ on, attrs }">
                                <v-btn
                                    icon
                                    color="primary"
                                    class="mr-2"
                                    color="primary"
                                    :href="'/datasets/' + item.id"
                                    target="_blank"
                                    v-bind="attrs"
                                    v-on="on">
                                    <v-icon small>mdi-chart-box</v-icon>
                                </v-btn>
                            </template>
                            <span>Open dataset</span>
                        </v-tooltip>
                    </template>
                </v-data-table>
                <v-card-text style="height: 45px; position: relative; text-align: right">
                    <v-tooltip left>
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                fab
                                small
                                class="mt-2 mr-4"
                                @click="getRelatedDatasets()"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-refresh</v-icon>
                            </v-btn>
                        </template>
                        <span>Refresh</span>
                    </v-tooltip>
                    <v-tooltip left>
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                fab
                                class="mr-4"
                                @click="addRelatedDataset()"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-plus</v-icon>
                            </v-btn>
                        </template>
                        <span>Create new dataset</span>
                    </v-tooltip>
                </v-card-text>
            </v-card>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Samples' && hasData && !isError"
            class="mt-6" 
            elevation="0">
            <v-card class="mt-6" v-if="relatedSamples !== null">
                <v-data-table
                    :headers="relatedSamplesHeaders"
                    :items="relatedSamples"
                    :server-items-length="relatedSamplesCount"
                    :options.sync="relatedSamplesTableOptions"
                    :footer-props="{'items-per-page-options':[10, 50, 100, -1]}"
                    multi-sort>

                    <template v-slot:item.id="{ item }">
                        <v-tooltip top>
                            <template v-slot:activator="{ on, attrs }">
                                <v-btn
                                    icon
                                    color="primary"
                                    class="mr-2"
                                    color="primary"
                                    :href="'/samples/' + item.id"
                                    target="_blank"
                                    v-bind="attrs"
                                    v-on="on">
                                    <v-icon small>mdi-test-tube</v-icon>
                                </v-btn>
                            </template>
                            <span>Open sample</span>
                        </v-tooltip>
                    </template>
                </v-data-table>
                <v-card-text style="height: 45px; position: relative; text-align: right">
                    <v-tooltip left>
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                fab
                                small
                                class="mt-2 mr-4"
                                @click="getRelatedSamples()"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-refresh</v-icon>
                            </v-btn>
                        </template>
                        <span>Refresh</span>
                    </v-tooltip>
                    <v-tooltip left>
                        <template v-slot:activator="{ on, attrs }">
                            <v-btn
                                color="primary"
                                fab
                                class="mr-4"
                                @click="addRelatedSample()"
                                v-bind="attrs"
                                v-on="on">
                                <v-icon>mdi-plus</v-icon>
                            </v-btn>
                        </template>
                        <span>Create new sample</span>
                    </v-tooltip>
                </v-card-text>
            </v-card>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Related samples' && hasData && !isError"
            class="mt-6" 
            elevation="0">
            <v-card class="mt-6" v-if="'parent_sample' in data">
                <v-timeline 
                    align-top 
                    class="ma-6"
                    :dense="$vuetify.breakpoint.smAndDown">
                    <v-timeline-item
                        fill-dot
                        color="secondary"
                        icon="mdi-test-tube">
                        <v-card
                            color="secondary"
                            dark>
                            <v-card-title>Parent sample</v-card-title>
                            <v-card-text class="white text--primary">
                                <p class="pt-2"><span v-text="data.sample_code"></span> is derived from:</p>
                                <v-chip
                                    v-if="Object.keys(data.parent_sample).length > 0"
                                    v-text="data.parent_sample.parent_sample_code"
                                    link
                                    :href="'/samples/' + data.parent_sample.parent_sample_id"
                                    color="primary"
                                    outlined></v-chip>
                            </v-card-text>
                            <v-card-text 
                                class="white text--primary"
                                style="height: 45px; position: relative; text-align: right">
                                <v-tooltip left v-if="isEditable && Object.keys(data.parent_sample).length > 0">
                                    <template v-slot:activator="{ on, attrs }">
                                        <v-btn
                                            color="error"
                                            fab
                                            small
                                            class="mt-2 mr-4"
                                            @click="unlinkParentSample()"
                                            v-bind="attrs"
                                            v-on="on">
                                            <v-icon>mdi-test-tube-off</v-icon>
                                        </v-btn>
                                    </template>
                                    <span>Unlink parent sample</span>
                                </v-tooltip>
                                <v-tooltip left v-if="isEditable">
                                    <template v-slot:activator="{ on, attrs }">
                                        <v-btn
                                            color="primary"
                                            fab
                                            class="mr-4"
                                            @click="parentSampleDialog = true"
                                            v-bind="attrs"
                                            v-on="on">
                                            <v-icon>mdi-swap-horizontal-bold</v-icon>
                                        </v-btn>
                                    </template>
                                    <span>Link parent sample</span>
                                </v-tooltip>
                            </v-card-text>
                        </v-card>
                    </v-timeline-item>
                    <v-timeline-item 
                        fill-dot
                        icon="mdi-test-tube">
                        <v-card
                            color="primary"
                            dark>
                            <v-card-title 
                                v-text="data.sample_code">
                            </v-card-title>
                        </v-card>
                    </v-timeline-item>
                    <v-timeline-item
                        fill-dot
                        color="secondary"
                        icon="mdi-test-tube">
                        <v-card
                            color="secondary"
                            dark
                            class="mb-6">
                            <v-card-title>Child samples</v-card-title>
                            <v-card-text class="white text--primary">
                                <p class="pt-2">Sample(s) that are derived from <span v-text="data.sample_code"></span>:</p>
                                <v-chip
                                    v-for="sample in childSamples"
                                    :key="sample.id"
                                    v-text="sample.sampleCode"
                                    :href="'/samples/' + sample.id"
                                    link
                                    color="primary"
                                    outlined
                                    class="mr-2 mb-2">
                                </v-chip>
                            </v-card-text>
                            <v-card-text 
                                class="white text--primary"
                                style="height: 45px; position: relative; text-align: right">
                                <v-tooltip left>
                                    <template v-slot:activator="{ on, attrs }">
                                        <v-btn
                                            fab
                                            small
                                            light
                                            class="mt-2 mr-4"
                                            @click="getChildSamples"
                                            v-bind="attrs"
                                            v-on="on">
                                            <v-icon>mdi-refresh</v-icon>
                                        </v-btn>
                                    </template>
                                    <span>Refresh</span>
                                </v-tooltip>
                                <v-tooltip left>
                                    <template v-slot:activator="{ on, attrs }">
                                        <v-btn
                                            color="primary"
                                            fab
                                            class="mr-4"
                                            @click="addRelatedSample()"
                                            v-bind="attrs"
                                            v-on="on">
                                            <v-icon>mdi-plus</v-icon>
                                        </v-btn>
                                    </template>
                                    <span>Create new sample</span>
                                </v-tooltip>
                            </v-card-text>
                        </v-card>
                    </v-timeline-item>
                </v-timeline>
            </v-card>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Contributors' && hasData && !isError"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <pre v-text="data"></pre>
        </v-card>

        <v-card 
            v-if="tabItems[tab] === 'Images' && hasData && !isError"
            class="mt-6" 
            elevation="0" 
            :disabled="!isEditable">
            <pre>IMAGES</pre>
        </v-card>
    </v-container>

    <v-dialog
        v-model="templateDialog"
        max-width="600">
        <v-card>
            <v-card-title class="text-h5">
                <span v-if="isNew">Select <span v-text="resource.toLowerCase()"></span> category</span>
                <span v-else>Change <span v-text="resource.toLowerCase()"></span> category</span>
            </v-card-title>

            <v-card-text>
                <v-form 
                    ref="templateDialogForm" 
                    v-model="templateDialogFormValid">
                    <v-select
                        v-model="category"
                        :items="categories"
                        item-text="name"
                        item-value="value"
                        label="Category"
                        :rules="requiredRule"
                        required></v-select>
                    <v-select
                        v-model="template"
                        :items="templates"
                        item-text="name"
                        item-value="value"
                        label="Template"
                        :rules="requiredRule"
                        required></v-select>
                </v-form>
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn
                    color="primary"
                    text
                    @click="templateDialog = false">
                    Cancel
                </v-btn>
                <v-btn
                    color="primary"
                    text
                    :disabled="!templateDialogFormValid"
                    @click="getSchema()">
                    Apply
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>

    <v-dialog
        v-model="relatedProjectDialog"
        max-width="600">
        <v-card>
            <v-card-title class="text-h5">
                <span>Link a project</span>
            </v-card-title>

            <v-card-text>
                <v-form 
                    ref="relatedProjectDialogForm" 
                    v-model="relatedProjectDialogFormValid">
                    <v-text-field
                        v-model="relatedProjectDialogProjectCode"
                        label="Project code"
                        :rules="requiredRule"
                        required></v-text-field>
                    <v-select
                        v-model="relatedProjectDialogUnit"
                        :items="units"
                        label="Unit"
                        :rules="requiredRule"
                        required></v-select>
                </v-form>
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn
                    color="primary"
                    text
                    @click="relatedProjectDialog = false">
                    Cancel
                </v-btn>
                <v-btn
                    color="primary"
                    text
                    :disabled="!relatedProjectDialogFormValid"
                    @click="getRelatedProject(null, relatedProjectDialogProjectCode, relatedProjectDialogUnit)">
                    Apply
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>

    <v-dialog
        v-model="relatedCollectionDialog"
        max-width="600">
        <v-card>
            <v-card-title class="text-h5">
                <span>Link a collection</span>
            </v-card-title>

            <v-card-text>
                <v-form 
                    ref="relatedCollectionDialogForm" 
                    v-model="relatedCollectionDialogFormValid">
                    <v-autocomplete
                        v-model="relatedCollectionDialogCollectionId"
                        :items="collections"
                        item-text="collection_name"
                        item-value="id"
                        label="Collection"
                        :rules="requiredRule"
                        required>
                        <template v-slot:append-outer>
                            <v-tooltip left>
                                <template v-slot:activator="{ on, attrs }">
                                    <v-btn
                                        icon
                                        color="primary"
                                        @click="getCollectionList()"
                                        v-bind="attrs"
                                        v-on="on">
                                        <v-icon>mdi-refresh</v-icon>
                                    </v-btn>
                                </template>
                                <span>Refresh collection list</span>
                            </v-tooltip>
                        </template>
                    </v-autocomplete>
                </v-form>
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn
                    color="primary"
                    text
                    @click="relatedCollectionDialog = false">
                    Cancel
                </v-btn>
                <v-btn
                    color="primary"
                    text
                    :disabled="!relatedCollectionDialogFormValid"
                    @click="getRelatedCollection(relatedCollectionDialogCollectionId)">
                    Apply
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>

    <v-dialog
        v-model="parentSampleDialog"
        max-width="600">
        <v-card>
            <v-card-title class="text-h5">
                <span>Link a parent sample</span>
            </v-card-title>

            <v-card-text>
                <v-form 
                    ref="parentSampleDialogForm" 
                    v-model="parentSampleDialogFormValid">
                    <v-autocomplete
                        v-model="parentSampleDialogCollectionId"
                        :items="collections"
                        item-text="collection_name"
                        item-value="id"
                        label="Collection"
                        :rules="requiredRule"
                        required>
                        <template v-slot:append-outer>
                            <v-tooltip left>
                                <template v-slot:activator="{ on, attrs }">
                                    <v-btn
                                        icon
                                        color="primary"
                                        @click="getCollectionList()"
                                        v-bind="attrs"
                                        v-on="on">
                                        <v-icon>mdi-refresh</v-icon>
                                    </v-btn>
                                </template>
                                <span>Refresh collection list</span>
                            </v-tooltip>
                        </template>
                    </v-autocomplete>
                    <v-text-field
                        v-model="parentSampleDialogSampleCode"
                        label="Sample code"
                        :rules="requiredRule"
                        required></v-text-field>
                </v-form>
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn
                    color="primary"
                    text
                    @click="parentSampleDialog = false">
                    Cancel
                </v-btn>
                <v-btn
                    color="primary"
                    text
                    :disabled="!parentSampleDialogFormValid"
                    @click="getParentSample(parentSampleDialogSampleCode, parentSampleDialogCollectionId)">
                    Apply
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>

    <v-dialog
        v-model="deleteDialog"
        max-width="600"
        :persistent="isDeleted">
        <v-card>
            <v-card-title class="text-h5">
                Delete&nbsp;<span v-text="resource.toLowerCase()"></span>
            </v-card-title>
            <v-card-text v-if="!isDeleted">
                Are you sure you want to delete this <span v-text="resource.toLowerCase()"></span>? This action cannot be undone.
            </v-card-text>
            <v-card-text v-if="isDeleted">
                The <span v-text="resource.toLowerCase()"></span> is deleted.
            </v-card-text>
            <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn
                    v-if="!isDeleted"
                    color="primary"
                    text
                    @click="deleteDialog = false">
                    Cancel
                </v-btn>
                <v-btn
                    v-if="!isDeleted"
                    color="primary"
                    text
                    @click="deleteData()">
                    Delete
                </v-btn>
                <v-btn
                    v-if="isDeleted"
                    color="primary"
                    text
                    href="{{ ui_endpoint }}">
                    OK
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
{% endblock %}

{% block script %}
    <script type="text/javascript">
        const primaryColor = '{{ primary_color }}'
        const title = '{{ title }}'
        const titleParts = '{{ title_parts | safe }}'
        const resource = '{{ resource }}'
        const uiEndpoint = '{{ ui_endpoint }}'
        const apiEndpoint = '{{ api_endpoint }}'
        const schemaEndpoint = '{{ schema_endpoint }}'
        const tabs = '{{ tabs | safe }}'
        const initialId = '{{ id }}'
        const queryParameterCategory = '{{ category }}'
        const queryParameterTemplate = '{{ template }}'
        const templateList = {{ template_list | safe }}
        const units = '{{ units | safe }}'

        const formOptions =  { 
            "locale": "en-gb", 
            "editMode": "inline",
            "textareaProps": {
                "filled": true,
                "auto-grow": true,
            },
            "timePickerProps": {
                "format": "24hr"
            }
        }

        Vue.component('VJsf', VJsf.default)

        new Vue({
            el: '#app',

            vuetify: new Vuetify({
                theme: {
                    themes: {
                        light: {
                            primary: primaryColor
                        },
                    },
                },
            }),

            data: {
                appBarDropdown: false,

                title: title,
                titleParts: JSON.parse(titleParts),
                resource: resource,
                id: initialId,
                schemaUrl: null,
                category: (queryParameterCategory !== "") ? queryParameterCategory : null,
                template: (queryParameterTemplate !== "") ? queryParameterTemplate : null,

                isEditable: false,
                isNew: false,
                isDeleted: false,
                isValid: null,
                isError: false,

                tab: null,
                tabItems: JSON.parse(tabs),
                templateDialog: false,
                templateDialogFormValid: false,
                categories: Object.values(templateList),
                templates: [],
                requiredRule: [
                    v => !!v || 'This field is required',
                ],
                deleteDialog: false,

                formOptions,
                data: {},
                schema: {},

                relatedProject: null,
                relatedProjectDialog: false,
                relatedProjectDialogFormValid: false,
                relatedProjectDialogProjectCode: null,
                relatedProjectDialogUnit: null,
                selectedRelatedProject: null,

                relatedCollection: null,
                relatedCollectionDialog: false,
                relatedCollectionDialogFormValid: false,
                relatedCollectionDialogCollectionId: null,

                relatedDatasets: null,
                relatedDatasetsHeaders: [
                    {text: " ", value:'id', sortable: false},
                    {text: 'Dataset code', value: 'dataset_code', sortable: true},
                    {text: 'Category', value: 'category', sortable: false},
                    {text: 'Template', value: 'template', sortable: false},
                    {text: 'Project code', value: 'project.project_code', sortable: true},
                    {text: 'Unit', value: 'project.unit', sortable: true},
                    {text: 'Access', value: 'terms.access', sortable: true}
                ],
                relatedDatasetsTableOptions: {
                    sortBy: ['dataset_code'],
                    sortDesc: [false]
                },
                relatedDatasetsCount: 0,

                relatedSamples: null,
                relatedSamplesHeaders: [
                    {text: " ", value:'id', sortable: false},
                    {text: 'Sample code', value: 'sample_code', sortable: true},
                    {text: 'Collection', value: 'collection.collection_name', sortable: true},
                    {text: 'Category', value: 'category', sortable: false},
                    {text: 'Template', value: 'template', sortable: false},
                    {text: 'Access', value: 'terms.access', sortable: true}
                ],
                relatedSamplesTableOptions: {
                    sortBy: ['sample_code', 'collection.collection_name'],
                    sortDesc: [false, false]
                },
                relatedSamplesCount: 0,

                parentSampleDialog: false,
                parentSampleDialogFormValid: false,
                parentSampleDialogCollectionId: null,
                parentSampleDialogSampleCode: null,

                childSamples: null,

                units: units !== '' ? JSON.parse(units) : [],
                collections: [],

                alert: false,
                alertType: "info",
                alertText: ""
            },

            mounted() {
                this.getData()
            },

            computed: {
                hasData() {
                    return (Object.keys(this.data).length !== 0)
                },
            },

            watch: {
                category: function () {
                    this.templates = (this.category) ? templateList[this.category]['templates'] : []
                },
                tab: function () {
                    if (this.hasData && !this.Error) {
                        if (this.tabItems[this.tab] === 'Project' 
                                && this.relatedProject === null
                                && Object.keys(this.data.project).length !== 0) {
                            this.getRelatedProject(this.data.project.project_id)
                        } else if (this.tabItems[this.tab] === 'Collection' 
                                && this.relatedCollection === null
                                && Object.keys(this.data.collection).length !== 0) {
                            this.getRelatedCollection(this.data.collection.collection_id)
                        } else if (this.tabItems[this.tab] === 'Datasets'
                                && this.relatedDatasets === null) {
                            this.relatedDatasets = [] //initialising relatedDatasets will display the data-table and initialise its options, which will trigger getRelatedDatasets()
                        } else if (this.tabItems[this.tab] === 'Samples'
                                && this.relatedSamples === null) {
                            this.relatedSamples = [] //initialising relatedSamples will display the data-table and initialise its options, which will trigger getRelatedSamples()
                        } else if (this.tabItems[this.tab] === 'Related samples'
                                && this.childSamples === null) {
                            this.getChildSamples()
                        }
                    }
                },
                relatedDatasetsTableOptions() {
                    this.getRelatedDatasets()
                },
                relatedSamplesTableOptions() {
                    this.getRelatedSamples()
                },
                relatedCollectionDialog() {
                    if (this.collections.length === 0)
                        this.getCollectionList()
                },
                parentSampleDialog() {
                    if (this.collections.length === 0)
                        this.getCollectionList()
                }
            },

            methods: {
                getSchema() {
                    this.templateDialog = false
                    if (this.category) {
                        let url = schemaEndpoint + '/' + this.category + (this.template !== '_default' ? '/' + this.template : '')
                        console.log('Get ' + url)
                        axios.get(url)
                            .then(response => {
                                // remove unnecessary bits from schema (and instance)
                                ['id', 'created_timestamp', 'created_by_user', 'modified_timestamp', 'modified_by_user'].forEach(e => delete response.data.properties[e])
                                // hide contributors, project, collection, files
                                response.data.properties.contributors['x-display'] = 'hidden'
                                if (this.resource === 'Dataset') {
                                    response.data.definitions.Project['x-display'] = 'hidden'
                                    response.data.properties.files['x-display'] = 'hidden'
                                }
                                if (this.resource === 'Sample') {
                                    response.data.definitions.Collection['x-display'] = 'hidden'
                                    response.data.definitions.ParentSample['x-display'] = 'hidden'
                                    response.data.properties.projects['x-display'] = 'hidden'
                                }
                                this.schema = response.data
                                this.schemaUrl = this.schema.$id
                            })
                            .catch(error => {
                                this.showAlert("error", "Missing schema: " + url)
                                console.log(error)
                                // reset this.category and this.template (if this.schemaUrl is set)
                                if (this.schemaUrl) this.getKeys()
                            })
                    }
                },

                getData() {
                    if (this.id !== "") {
                        let url = apiEndpoint + '/' + this.id
                        console.log('Get ' + url)
                        axios.get(url)
                            .then(response => {
                                this.data = response.data
                                let arr = []
                                this.titleParts.forEach(k => arr.push(this.data[k]))
                                this.title = this.resource + ": <i>" + arr.join(" &sdot; ")
                                this.isEditable = false
                                this.isNew = false
                                this.schemaUrl = this.data.$schema
                                this.getKeys()
                                this.getSchema()
                            })
                            .catch(error => {
                                this.title = this.resource + " not found"
                                this.isError = true
                                this.handleApiErrors(error)
                            })
                    } else {
                        this.title = "New " + this.resource.toLowerCase()
                        // initialise this.data as empty object or with the provided initial data
                        this.data = {}
                        const init = new URLSearchParams(window.location.search).get('init')
                        if (init !== null) {
                            this.data = JSON.parse(init)
                        }
                        this.isEditable = true
                        this.isNew = true
                        // if category (and template) are supplied as query parameters, retrieve schema, 
                        // if not, show templateDialog 
                        if (this.category) {
                            this.getSchema()
                        } else {
                            this.templateDialog = true
                        }
                    }
                },

                postData() {
                    this.alert = false
                    console.log('Post ' + apiEndpoint)
                    let data = {
                        $schema: this.schemaUrl,
                        ...this.data
                    }
                    axios.post(apiEndpoint, data)
                        .then(response => {
                            this.showAlert("success", "The " + this.resource.toLowerCase() + " was successfully saved.")
                            // replace data with the returned data
                            this.isNew = false
                            this.isEditable = false
                            this.id = response.data.id
                            this.data = response.data
                            window.history.replaceState(
                                {}, 
                                this.resource + " form", 
                                uiEndpoint + "/" + this.id
                            )
                            let arr = []
                            this.titleParts.forEach(k => arr.push(this.data[k]))
                            this.title = this.resource + ": <i>" + arr.join(" &sdot; ")
                        })
                        .catch(error => {
                            this.handleApiErrors(error)
                        })
                },

                putData() {
                    this.alert = false
                    let url = apiEndpoint + '/' + this.id
                    console.log('Put ' + url)
                    // prepare data to put
                    let data = {
                        $schema: this.schemaUrl,
                        ...this.data
                    }
                    axios.put(url, data)
                        .then(response => {
                            this.showAlert("success", "The " + this.resource.toLowerCase() + " was successfully saved.")
                            // replace data with the returned data
                            this.isEditable = false
                            this.id = response.data.id
                            this.data = response.data
                            window.history.replaceState(
                                {}, 
                                this.resource + " form", 
                                uiEndpoint + "/" + this.id
                            )
                            let arr = []
                            this.titleParts.forEach(k => arr.push(this.data[k]))
                            this.title = this.resource + ": <i>" + arr.join(" &sdot; ")
                        })
                        .catch(error => {
                            this.handleApiErrors(error)
                        })
                },

                deleteData() {
                    this.alert = false
                    if (!this.isNew) {
                        let url = apiEndpoint + '/' + this.id
                        console.log('Delete ' + url)
                        axios.delete(url)
                            .then(response => {
                                this.isDeleted = true
                            })
                            .catch(error => {
                                this.deleteDialog = false
                                this.handleApiErrors(error)
                            })
                    }
                },

                getRelatedProject(project_id, project_code = null, unit = null) {
                    let url = null
                    if (project_id !== null) {
                        url = '/api/v1/projects/' + project_id
                    } else if (project_code !== null && unit !== null) {
                        url = '/api/v1/projects/keys?project_code=' + project_code + '&unit=' + unit
                    }
                    if (url !== null) {
                        console.log('Get ' + url)
                        axios.get(url)
                            .then(response => {
                                this.relatedProject = this.flattenObj(response.data, 'project')
                                if (this.resource === 'Dataset') {
                                    // update dataset if changed
                                    if (Object.keys(this.data.project).length === 0 
                                            || this.relatedProject.id !== this.data.project.project_id) {
                                        this.data.project['project_id'] = this.relatedProject.id
                                        this.data.project['project_code'] = this.relatedProject.project_code
                                        this.data.project['unit'] = this.relatedProject.unit
                                    }
                                    // prefill form data
                                    this.relatedProjectDialogProjectCode = this.relatedProject.project_code
                                    this.relatedProjectDialogUnit = this.relatedProject.unit
                                } else if (this.resource === 'Sample') {
                                    // check if this project is already linked
                                    let projectIndex = -1
                                    if (this.data.projects.length > 0) {
                                        for (let i in this.data.projects) {
                                            if (this.data.projects[i].project_id === this.relatedProject.id) {
                                                // this project is already linked, set position in array
                                                projectIndex = parseInt(i)
                                                break
                                            }
                                        }
                                    }
                                    // if not already linked, link it
                                    if (projectIndex === -1) {
                                        projectIndex = this.data.projects.length
                                        this.data.projects.push({
                                            project_id: this.relatedProject.id,
                                            project_code: this.relatedProject.project_code,
                                            unit: this.relatedProject.unit
                                        })
                                    }
                                    // set selected item
                                    if (this.selectedRelatedProject !== projectIndex)
                                        this.selectedRelatedProject = projectIndex
                                }
                                // close form
                                this.relatedProjectDialog = false
                            })
                            .catch(error => {
                                this.handleApiErrors(error, "related project")
                            })
                    }
                },

                unlinkRelatedProject() {
                    this.data.project = {} // better would be to remove project from data, but VJSF does not allow this (known bug)
                    this.relatedProject = null
                },

                getRelatedCollection(collection_id) {
                    let url = '/api/v1/collections/' + collection_id
                    console.log('Get ' + url)
                    axios.get(url)
                        .then(response => {
                            this.relatedCollection = this.flattenObj(response.data, 'collection')
                            // update dataset if changed
                            if (Object.keys(this.data.collection).length === 0 
                                    || this.relatedCollection.id !== this.data.collection.collection_id) {
                                this.data.collection['collection_id'] = this.relatedCollection.id
                                this.data.collection['collection_name'] = this.relatedCollection.collection_name
                            }
                            // prefill form data
                            this.relatedCollectionDialogCollectionId = this.relatedCollection.collection_id
                            this.relatedCollectionDialog = false
                        })
                        .catch(error => {
                            this.handleApiErrors(error, "related collection")
                        })
                },

                getCollectionList() {
                    let url = '/api/v1/collections/list'
                    console.log('Get ' + url)
                    axios.get(url)
                        .then(response => {
                            this.collections = response.data
                            if (Object.keys(this.data.collection).length !== 0)
                                this.relatedCollectionDialogCollectionId = this.data.collection.collection_id
                        })
                        .catch(error => {
                            this.handleApiErrors(error, "list of collections")
                        })
                },

                flattenObj(obj, resource) {
                    let result = {}
                    for (const i in obj) {
                        // We check the type of the i using typeof() function and recursively call the function again
                        if ((typeof obj[i]) === 'object' && !Array.isArray(obj[i])) {
                            const temp = this.flattenObj(obj[i], resource)
                            for (const j in temp) {
                                result[i + '.' + j] = temp[j]
                            }
                        } else { // Else store obj[i] in result directly
                                if (Array.isArray(obj[i])) {
                                    obj[i] = obj[i]
                                } else if (i === '$schema') {
                                    let parts = obj[i].split(resource + "/", 2)[1].split("/")
                                    result['category'] = parts[0]
                                    if (parts[1] !== null)
                                        result['template'] = parts[1]
                                }
                            result[i] = obj[i]
                        }
                    }
                    return result
                },

                makeColumnName(item) {
                    // split combined
                    if (item.includes('.')) {
                        let arr = item.split('.')
                        item = arr.pop()
                    }
                    // replace characters
                    item = item.replace('$', '').replace('_', ' ')
                    // capitalize first character
                    return item.charAt(0).toUpperCase() + item.slice(1);
                },

                getRelatedDatasets() {
                    let url = '/api/v1/datasets'
                    let skip = (this.relatedDatasetsTableOptions.page - 1) * this.relatedDatasetsTableOptions.itemsPerPage
                    let parameters = {
                        skip: isNaN(skip) ? null : skip,
                        limit: this.relatedDatasetsTableOptions.itemsPerPage,
                        sort_by: this.relatedDatasetsTableOptions.sortBy,
                        sort_desc: this.relatedDatasetsTableOptions.sortDesc,
                        find: JSON.stringify({'project.project_id': this.id})
                    }

                    console.log('Get ' + url)
                    axios.get(url, {params: parameters})
                        .then(response => {
                            this.relatedDatasets = []
                            for (i in response.data.data) {
                                this.relatedDatasets[i] = this.flattenObj(response.data.data[i], 'dataset')
                            }
                            this.relatedDatasetsCount = response.data.query_parameters.total
                        })
                        .catch(error => {
                            this.handleApiErrors(error, "related datasets")
                        })
                },

                addRelatedDataset() {
                    let project = {
                        project_id: this.id,
                        project_code: this.data.project_code,
                        unit: this.data.unit
                    }
                    let url = "/datasets/new?init=" + encodeURIComponent(JSON.stringify({'project': project}))
                    window.open(url, "_blank")
                },

                getRelatedSamples() {
                    let url = '/api/v1/samples'
                    let skip = (this.relatedSamplesTableOptions.page - 1) * this.relatedSamplesTableOptions.itemsPerPage
                    let parameters = {
                        skip: isNaN(skip) ? null : skip,
                        limit: this.relatedSamplesTableOptions.itemsPerPage,
                        sort_by: this.relatedSamplesTableOptions.sortBy,
                        sort_desc: this.relatedSamplesTableOptions.sortDesc,
                        find: JSON.stringify({'collection.collection_id': this.id})
                    }

                    console.log('Get ' + url)
                    axios.get(url, {params: parameters})
                        .then(response => {
                            this.relatedSamples = []
                            for (i in response.data.data) {
                                this.relatedSamples[i] = this.flattenObj(response.data.data[i], 'sample')
                            }
                            this.relatedSamplesCount = response.data.query_parameters.total
                        })
                        .catch(error => {
                            this.handleApiErrors(error, "related samples")
                        })
                },

                addRelatedSample() {
                    let prefill = null
                    if (this.resource === 'Collection') {
                        // prefill collection details
                        prefill = encodeURIComponent(JSON.stringify({
                            collection: {
                                collection_id: this.id,
                                collection_name: this.data.collection_name
                            }
                        }))
                    } else if (this.resource === 'Sample') {
                        // prefill parent sample details
                        prefill = encodeURIComponent(JSON.stringify({
                            parent_sample: {
                                parent_sample_id: this.id,
                                parent_sample_code: this.data.sample_code
                            }
                        }))
                    }

                    if (prefill !== null)
                        window.open("/samples/new?init=" + prefill, "_blank")
                },

                getParentSample(sampleCode, collectionId) {
                    let url = '/api/v1/samples/keys?sample_code=' + sampleCode + '&collection_id=' + collectionId
                    console.log('Get ' + url)
                    axios.get(url)
                        .then(response => {
                            // update dataset if changed
                            if (Object.keys(this.data.parent_sample).length === 0 
                                    || this.data.parent_sample.parent_sample_id !== response.data.id) {
                                this.data.parent_sample.parent_sample_id = response.data.id
                                this.data.parent_sample.parent_sample_code = response.data.sample_code
                            }
                            this.parentSampleDialog = false
                        })
                        .catch(error => {
                            this.handleApiErrors(error, "parent sample")
                        })
                },

                unlinkParentSample() {
                    this.data.parent_sample = {} // better would be to remove parent_sample entirely from data, but VJSF does not allow this (known bug)
                },

                getChildSamples() {
                    let url = '/api/v1/samples'
                    let parameters = {
                        skip: 0,
                        limit: 0,
                        sort_by: ['sample_code'],
                        find: JSON.stringify({'parent_sample.parent_sample_id': this.id})
                    }
                    console.log('Get ' + url)
                    axios.get(url, {params: parameters})
                        .then(response => {
                            this.childSamples = []
                            for (i in response.data.data) {
                                this.childSamples.push({
                                    id: response.data.data[i].id,
                                    sampleCode: response.data.data[i].sample_code
                                })
                            }
                        })
                        .catch(error => {
                            this.handleApiErrors(error, "child samples")
                        })
                },

                saveData() {
                    if (this.isValid) {
                        if (this.isNew) {
                            this.postData()
                        } else {
                            this.putData()
                        }
                    }
                },

                getKeys() {
                    if (this.schemaUrl) {
                        let parts = this.schemaUrl.split(resource.toLowerCase() + "/", 2)[1].split("/")
                        this.category = parts[0]
                        this.template = (parts.length >= 2) ? parts[1] : '_default'
                    }
                },

                showAlert(type, text) {
                    this.alert = true
                    this.alertType = type
                    this.alertText = text
                },

                handleApiErrors(error, resource = null) {
                    console.warn(error)

                    if (resource === null) resource = this.resource.toLowerCase()

                    if (error.response && error.response.data.detail === 'NoResults') { 
                        this.showAlert("error", "Cannot not find the " + resource + ".")
                    } else if (error.response && error.response.data.detail === 'DuplicateKey') {
                        let keys = 'keys'
                        if (this.resource === 'Project') keys = 'project code and unit'
                        else if (this.resource === 'Dataset') keys = 'dataset code'
                        else if (this.resource === 'Collection') keys = 'collection name'
                        else if (this.resource === 'Sample') keys = 'collection and sample code'
                        this.showAlert("error", "Cannot store this " + resource 
                            + " because another " + resource + " exists with the same " + keys)
                    } else if (error.response && error.response.data.detail === 'NotCreated') {
                        this.showAlert("error", "Cannot create this " + resource + ".")
                    } else if (error.response && error.response.data.detail === 'NotUpdated') {
                        this.showAlert("error", "Cannot update this " + resource + ".")
                    } else if (error.response && error.response.data.detail === 'NotDeleted') {
                        this.showAlert("error", "Cannot delete this " + resource + ".")
                    } else if (error.response && error.response.data.detail === 'DependentObjects') {
                        let dependentObjects = 'objects'
                        if (this.resource === 'Collection') keys = 'samples'
                        this.showAlert("error", "Cannot delete this " + resource + " because it has linked " + dependentObjects + ".")
                    } else if (error.response && error.response.status == 422) {
                        let msg = Array.isArray(error.response.data.detail) ? error.response.data.detail[0].type : error.response.data.detail
                        this.showAlert("error", "The " + resource + " could not be saved: " + msg)
                    } else if (error.response && error.response.data.detail === 'ParameterError') {
                        this.showAlert("error", "Error in API request.")
                    } else {
                        this.showAlert("error", "Unknown error")
                    }
                },
            }
        })
    </script>
{% endblock %}