<!DOCTYPE HTML>
<html>
<head>
    <title>Schema editor</title>
    <meta charset="UTF-8">
    <link rel="shortcut icon" href="/static/images/favicon.ico">

    <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/third-party.js"></script>

    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/main.css">
</head>
<body>

    <v-app id="app">

        <v-app-bar color="white" class="px-10">
            <img height="45" src="/static/images/logo.svg"/>
            <v-spacer></v-spacer>
            <v-app-bar-nav-icon></v-app-bar-nav-icon>
        </v-app-bar>

        <v-banner color="primary" class="elevation-5">
            <span class="white--text text-h3 px-10">{{ '{{title}}' }}</div>
        </v-banner>

        <v-container>
            <v-row>

                <v-col>
                    <v-card>
                        <v-card-title class="primary--text text-h5">Template form</v-card-title>
                        <v-card-text>
                            <v-form ref="form" v-model="valid">
                                <v-jsf v-model="model" :schema="schema" :options="options" />
                            </v-form>
                        </v-card-text>
                        <v-card-actions class="white">
                            <v-spacer></v-spacer>
                            <v-btn class="mx-2" color="primary" @click="$refs.form.validate()">Validate</v-btn>
                        </v-card-actions>
                    </v-card>
                </v-col>

                <v-col>
                    <v-card>
                        <v-card-title>
                            <v-tabs grow>
                                <v-tab>Base schema</v-tab>
                                <v-tab>Result schema</v-tab>
                                <v-tab>Example form</v-tab>
                                <v-tab>Help</v-tab>
                            </v-tabs>
                        </v-card-title>
                        <v-card-text>
                            <pre>{{ '{{model.json_schema}}' }}</pre>
                        </v-card-text>
                    </v-card>
                </v-col>

            </v-row>
        </v-container>

        <v-container fill-height /> <!-- fills remaining horizontal space, if necessary -->
    </v-app>

    <script type="text/javascript">

        // initial settings and data from jinja
        const initialSchema = '{{ schema | safe }}'
        const initialId = '{{ id }}'
        const options =  { 
            "editMode": "inline",
            "textareaProps": {
                "filled": true,
                "auto-grow": true
            }
        }
        
        Vue.component('VJsf', VJsf.default)

        new Vue({
            el: '#app',

            vuetify: new Vuetify({
                theme: {
                    themes: {
                        light: {
                            primary: '#af8d55'
                        },
                    },
                },
            }),

            created() {
                this.transformSchema(initialSchema)
                this.getTemplate(initialId)
            },

            data: {
                options,
                model: {},
                schema: {},
                valid: null,
                title: "Template form (loading)"
            },

            methods: {
                transformSchema(schemaString) {
                    schema = JSON.parse(schemaString)
                    schema.properties.json_schema.type = "string"
                    schema.properties.json_schema["x-display"] = "textarea"
                    this.schema = schema
                },

                getTemplate(id) {
                    if (id !== "") {
                        let url = '/api/v1/templates/' + id
                        axios.get(url)
                            .then(response => {
                                this.model = response.data
                                this.model.json_schema = JSON.stringify(this.model.json_schema, null, 2)
                                this.title = "Template: " + response.data.resource + "/" + response.data.category  + "/" + response.data.template
                            })
                            .catch(error => {
                                console.log(error)
                            })
                    } else {
                        this.title = "New template"
                    }
                },
            },
        })
    </script>
	
</body>
</html>