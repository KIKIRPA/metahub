<!DOCTYPE HTML>
<html>
<head>
    <title>Template form</title>
    <meta charset="UTF-8">
    <link rel="shortcut icon" href="/static/images/favicon.ico">

    <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/third-party.js"></script>

    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@koumoul/vjsf@2.7.3/dist/main.css">
</head>
<body>

    <v-app id="app">

        <v-app-bar color="white" class="px-10">
            <img height="45" src="/static/images/logo.svg"/>
            <v-spacer></v-spacer>
            <v-app-bar-nav-icon></v-app-bar-nav-icon>
        </v-app-bar>

        <v-banner color="primary" class="elevation-5 px-10">
            <span class="white--text text-h3 px-10">{{ '{{title}}' }}</span>
            <template v-slot:actions>
                <v-tooltip left v-if="!isNew && isEditable">
                    <template v-slot:activator="{ on, attrs }">
                        <v-btn
                            class="mx-2"
                            color="error"
                            fab
                            small
                            @click=""
                            v-bind="attrs"
                            v-on="on">
                            <v-icon>mdi-delete</v-icon>
                        </v-btn>
                    </template>
                    <span>Delete</span>
                </v-tooltip>
                <v-tooltip left v-if="isEditable">
                    <template v-slot:activator="{ on, attrs }">
                        <v-btn
                            class="mx-2"
                            color="success"
                            fab
                            small
                            @click=""
                            v-bind="attrs"
                            v-on="on"
                            :disabled="!validMeta || !validJson || !validSchema">
                            <v-icon>mdi-content-save</v-icon>
                        </v-btn>
                    </template>
                    <span>Save</span>
                </v-tooltip>
                <v-tooltip left v-if="isEditable">
                    <template v-slot:activator="{ on, attrs }">
                        <v-btn
                            class="mx-2"
                            color="secondary"
                            fab
                            @click="initialize()"
                            v-bind="attrs"
                            v-on="on">
                            <v-icon>mdi-cancel</v-icon>
                        </v-btn>
                    </template>
                    <span>Cancel</span>
                </v-tooltip>
                <v-tooltip left v-if="!isEditable">
                    <template v-slot:activator="{ on, attrs }">
                        <v-btn
                            class="mx-2"
                            color="secondary"
                            fab
                            @click="isEditable = true"
                            v-bind="attrs"
                            v-on="on">
                            <v-icon>mdi-pencil</v-icon>
                        </v-btn>
                    </template>
                    <span>Edit template</span>
                </v-tooltip>
            </template>
        </v-banner>

        <v-container>
            <v-row>

                <v-col>
                    <v-card class="mt-6" :disabled="!isEditable">
                        <v-card-title class="primary--text text-h5">Template</v-card-title>
                        <v-card-text >
                            <v-form ref="form" v-model="validMeta">
                                <v-jsf v-model="model" :schema="schema" :options="options"/>
                            </v-form>
                            <v-textarea
                                v-model="jsonSchemaTxt"
                                @change="convertJson()"
                                name="json_schema_txt"
                                label="JSON schema overrides"
                                style="font-family:'monospace'"
                                rows="10"
                                filled />
                        </v-card-text>
                    </v-card>
                </v-col>

                <v-col>
                    <v-stepper 
                        alt-labels
                        class="mt-6"
                        v-show="isEditable"
                        v-model="stepper">
                        <v-stepper-header>
                            <v-stepper-step 
                                step="1"
                                :complete="validMeta">
                                Metadata
                            </v-stepper-step>
                            <v-divider></v-divider>
                            <v-stepper-step
                                step="2" 
                                :complete="validJson">
                                JSON
                            </v-stepper-step>
                            <v-divider></v-divider>
                            <v-stepper-step
                                step="3"
                                :complete="validSchema">
                                Schema
                            </v-stepper-step>
                        </v-stepper-header>
                        <v-stepper-items>
                            <v-stepper-content step="1">
                                <v-card>
                                    <v-card-actions>
                                        <span 
                                            class="error--text"
                                            v-if="!validMeta">
                                            The template metadata is invalid.
                                        </span>
                                        <v-spacer></v-spacer>
                                        <v-tooltip bottom>
                                            <template v-slot:activator="{ on, attrs }">
                                                <v-btn 
                                                    class="mx-2"
                                                    :color="validMeta?'success':'primary'"
                                                    fab
                                                    small
                                                    @click="$refs.form.validate()"
                                                    v-bind="attrs"
                                                    v-on="on">
                                                    <v-icon>mdi-checkbox-marked-outline</v-icon>
                                                </v-btn>
                                            </template>
                                            <span>Validate metadata</span>
                                        </v-tooltip>
                                    </v-card-actions>
                                </v-card>
                            </v-stepper-content>

                            <v-stepper-content step="2">
                                <v-card>
                                    <v-card-actions>
                                        <span 
                                            class="error--text"
                                            v-if="!validJson">
                                            {{ '{{validJsonError}}' }}
                                        </span>
                                        <v-spacer></v-spacer>
                                        <v-tooltip bottom>
                                            <template v-slot:activator="{ on, attrs }">
                                                <v-btn 
                                                    class="mx-2"
                                                    :color="validJson?'success':'primary'"
                                                    fab
                                                    small
                                                    @click="convertJson()"
                                                    v-bind="attrs"
                                                    v-on="on">
                                                    <v-icon>mdi-checkbox-marked-outline</v-icon>
                                                </v-btn>
                                            </template>
                                            <span>Validate JSON</span>
                                        </v-tooltip>
                                    </v-card-actions>
                                </v-card>
                            </v-stepper-content>

                            <v-stepper-content step="3">
                                <v-card>
                                    <v-card-actions>
                                        <span 
                                            class="error--text"
                                            v-if="!validSchema || needsFullReload">
                                            {{ '{{validSchemaError}}' }}
                                        </span>
                                        <v-spacer></v-spacer>
                                        <v-tooltip bottom>
                                            <template v-slot:activator="{ on, attrs }">
                                                <v-btn 
                                                    class="mx-2"
                                                    :color="validSchema?'success':'primary'"
                                                    fab
                                                    small
                                                    @click="validateSchema()"
                                                    v-bind="attrs"
                                                    v-on="on">
                                                    <v-icon>mdi-checkbox-marked-outline</v-icon>
                                                </v-btn>
                                            </template>
                                            <span>Validate schema</span>
                                        </v-tooltip>
                                    </v-card-actions>
                                </v-card>
                            </v-stepper-content>
                        </v-stepper-items>
                    </v-stepper>

                    <v-card class="mt-6" v-if="!needsFullReload">
                        <v-card-title>
                            <v-tabs 
                                v-model="tab"
                                grow>
                                <v-tab>Base schema</v-tab>
                                <v-tab>Computed schema</v-tab>
                                <v-tab>Example form</v-tab>
                            </v-tabs>
                        </v-card-title>
                        <v-card-text>
                            <v-tabs-items v-model="tab" >
                                <v-tab-item>
                                    <pre>{{ '{{baseSchema}}' }}</pre>
                                </v-tab-item>
                                <v-tab-item>
                                    <pre>{{ '{{computedSchema}}' }}</pre>
                                </v-tab-item>
                                <v-tab-item>
                                    <!-- v-form ref="computedSchemaForm" v-model="computedSchemaValid">
                                        <v-jsf v-model="computedSchemaModel" :schema="computedSchema" :options="computedSchemaOptions"/>
                                    </v-form -->
                                </v-tab-item>
                            </v-tabs-items>
                        </v-card-text>
                    </v-card>
                </v-col>

            </v-row>
        </v-container>

        <v-container fill-height /> <!-- fills remaining horizontal space, if necessary -->
    </v-app>

    <script type="text/javascript">

        // initial settings and data from jinja
        const initialSchema = '{{ schema | safe }}'
        const initialId = '{{ id }}'
        const options =  { 
            "editMode": "inline",
            "textareaProps": {
                "filled": true,
                "auto-grow": true,
            },
        }
        
        Vue.component('VJsf', VJsf.default)

        new Vue({
            el: '#app',

            vuetify: new Vuetify({
                theme: {
                    themes: {
                        light: {
                            primary: '#af8d55'
                        },
                    },
                },
            }),

            created() {
                this.initialize()
            },

            computed: {
                key() {
                    return {
                        resource: this.model.resource, 
                        category: this.model.category, 
                        template: this.model.template
                    }
                }
            },

            watch: {
                isEditable: function(val) {
                    if (val && this.model.hasOwnProperty('resource')) {
                        this.$refs.form.validate()  //validate metadata
                        this.convertJson()          //validate json
                    }
                },
                validMeta: function(val) {this.showStep()},
                validJson: function(val) {this.showStep()},
                key: function(val) {
                    console.log('Watch: key')
                    if (this.model.hasOwnProperty('resource')
                            && this.model.hasOwnProperty('category')
                            && this.model.hasOwnProperty('template')) {
                        if (this.baseSchemaKey === "")
                            this.getBaseSchema()
                        else {
                            let newBaseSchemaKey = this.model.resource 
                                + ((this.model.template !== '_default') ? '/' + this.model.category : '')
                            if (newBaseSchemaKey !== this.baseSchemaKey) {
                                this.needsFullReload = true
                                this.validSchemaError = "Project, category or template fields have changed. Validation is required"
                            }
                        }
                    }
                    this.computedSchema = {}
                },
            },

            data: {
                options,
                model: {},
                schema: {},
                title: "Template form (loading)",
                stepper: 1,
                isEditable: false,
                isNew: false,
                jsonSchemaTxt: "",
                tab: null,
                baseSchemaKey: "",
                baseSchema: {},
                needsFullReload: true,

                validMeta: null,
                validJson: null,
                validJsonError: "",
                validSchema: null,
                validSchemaError: "",

                computedSchema: {},
                computedSchemaValid: null,
                computedSchemaModel: {},
                computedSchemaOptions: {},
            },

            methods: {
                initialize() {
                    console.log('Method initialize')
                    this.transformSchema(initialSchema)
                    this.getTemplate(initialId)
                },

                transformSchema(schemaString) {
                    console.log('TransformSchema')
                    schema = JSON.parse(schemaString)
                    schema.properties.json_schema["x-display"] = "hidden"
                    this.schema = schema
                },

                getTemplate(id) {
                    console.log('Method getTemplate')
                    if (id !== "") {
                        let url = '/api/v1/templates/' + id
                        console.log('Get ' + url)
                        axios.get(url)
                            .then(response => {
                                this.model = response.data
                                this.jsonSchemaTxt = JSON.stringify(this.model.json_schema, null, 2)
                                this.title = "Template: " + response.data.resource + "/" + response.data.category  + "/" + response.data.template
                                this.isEditable = false
                                this.isNew = false
                                this.needsFullReload = false
                                this.getBaseSchema()
                            })
                            .catch(error => {
                                console.log(error)
                            })
                    } else {
                        this.title = "New template"
                        this.model = {}
                        this.isEditable = true
                        this.isNew = true
                        this.jsonSchemaTxt = "{}"
                    }
                },

                getBaseSchema() {
                    console.log('Method getBaseSchema')
                    if (this.model.hasOwnProperty('resource')
                            && this.model.hasOwnProperty('category')
                            && this.model.hasOwnProperty('template')) { 
                        let baseSchemaKey = this.model.resource 
                            + ((this.model.template !== '_default') ? '/' + this.model.category : "")
                        let url = '/schema/' + baseSchemaKey
                        console.log('Get ' + url)
                        axios.get(url)
                            .then(response => {
                                this.baseSchema = response.data
                                this.baseSchemaKey = baseSchemaKey
                                this.needsFullReload = false
                            })
                            .catch(error => {
                                this.baseSchema = {}
                                console.log(error)
                            })
                    } else {
                        this.baseSchema = {}
                        this.computedSchema = {}
                    }
                },

                convertJson() {
                    console.log('Method convertJson')
                    try {
                        this.model.json_schema = JSON.parse(this.jsonSchemaTxt)
                        this.validJson = true
                    } catch (e) {
                        this.validJsonError = e.toString()
                            .replace("SyntaxError:", "Syntax error:")
                            .replace("JSON.parse:", "")
                        this.validJson = false
                    }
                },

                showStep() {
                    console.log('Method showStep')
                    if (!this.validMeta) this.stepper = 1
                    else if (!this.validJson) this.stepper = 2
                    else this.stepper = 3
                },

                validateSchema() {
                    console.log('Method validateSchema')
                    this.validSchemaError = ""
                    //if (this.needsFullReload) 
                    //    this.getBaseSchema()
                    
                    let url = '/api/v1/templates/validate'
                    console.log('Post ' + url)
                    axios.post(url, this.model)
                        .then(function (response) {
                            console.log(response.data)
                            this.computedSchema = response.data
                            console.log(this.computedSchema)
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },

            },
        })
    </script>
	
</body>
</html>